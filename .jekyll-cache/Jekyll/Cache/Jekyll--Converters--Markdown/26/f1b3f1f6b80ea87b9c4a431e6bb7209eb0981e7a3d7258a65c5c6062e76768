I")<blockquote>
  <p>남들 다 쓴다는 고래 사용법 .</p>
</blockquote>

<h2 id="tools">Tools</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Windows</code>, <code class="language-plaintext highlighter-rouge">Docker</code>, <code class="language-plaintext highlighter-rouge">shell</code> etc…</li>
</ul>

<h2 id="1-이걸-왜했냐면">1. 이걸 왜했냐면…</h2>
<hr />
<blockquote>
  <p>🙄 필자는 이에 대해 아는 것이 전무하므로, 내용 중 틀린 것이 있을 수 있으니 각오하고 읽어주길 바란다.</p>
</blockquote>

<p>나만의 무기를 만들기 위한 프로젝트를 진행하기 이전에 모두의 셋업의 sync를 맞추기 위해서 docker라는 가상환경을 사용하기로 결정했다.<br />
간단한 학습과 <a href="!https://github.com/orgs/SWJungle/people/zeroistfilm">유쾌한 선생님🤩</a>을 통해서 (image가 뭐고 container가 뭐고, dockerhub는 뭐고… 깃헙 짭인가 엌ㅋㅋ) 자잘한 지식들을 쌓았고, 실전에 적용할 수 있도록 run, pull, start 등의 간단한 커맨드에 익숙해지는 시간도 가졌다.<br />
그런데, 가상환경 위에서 서버를 돌리면서 프로젝트를 진행하는 모습을 상상해보니 프로젝트를 공유하고 관리하기 위해서 깃허브와 같은 <code class="language-plaintext highlighter-rouge">VCS</code>(Version Control System)을 이용하여야 할 것이고, <strong>문제는 이 코드를 도커위에서 어떻게 수정 하느냐</strong> 인데, 나는 (다른 팀원들도 그럴거라 믿지만) <code class="language-plaintext highlighter-rouge">vim 포비아</code>가 있기 때문에 이를 해결하기 위해서 <code class="language-plaintext highlighter-rouge">vsc</code>에서 서버의 파일을 사용할 수 있도록 하는 노력을 아래에서 해볼 예정이다.</p>

<ul>
  <li>
    <p>주의하자. 도커를 이용해 <strong>서버를 배포하는 것</strong>과 <strong>개발 환경을 구축하는 것</strong>은 다르다.</p>
  </li>
  <li>
    <p>참고 :: <a href="!http://labs.brandi.co.kr/2021/01/20/hwangsg.html">도커를 통해 서버 배포하기 (브랜디)</a></p>
  </li>
</ul>

<h2 id="2-일단-도커-container-접속하기">2. 일단 도커 container 접속하기</h2>
<hr />
<p>사용하고 있는 기존의 환경에 따라 다를 수 있을지도 모르겠다.</p>
<ul>
  <li>
    <p>나는 현재 <code class="language-plaintext highlighter-rouge">Windows10 WSL2</code>으로 진행하고 있다.(windows에서 사용하기 위해서는 docker desktop을 설치해야한다.)</p>
  </li>
  <li>
    <p>간단한 명령어를 위에 정리해 보았다. 사실상 <code class="language-plaintext highlighter-rouge">docker run command</code>만 있으면 무적인데, 이는 환경설정이 셋업되어 있는 이미지를 받아 ‘곧바로’ 컨테이너로 실행할 수 있게 해준다. 위의 커맨드를 통한 접근을 GUI desktop을 이용해 쉽게 할 수도 있다. <del>간지나게 CLI를 이용하자.</del></p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> docker pull <span class="o">{</span>이미지명<span class="o">}</span>:<span class="o">{</span>태그<span class="o">}</span> <span class="c"># 1. 일단 dockerhub 어딘가에 있는 이미지를 이미지 명과 태그로 가져온다.</span>

<span class="o">&gt;&gt;</span> docker images <span class="c"># 컴퓨터 내 도커 이미지들을 확인할 수 있다.</span>

<span class="c">#결과</span>
ubuntu@ip-172-31-39-245:~<span class="nv">$ </span>docker images
REPOSITORY           TAG       IMAGE ID       CREATED        SIZE
karxxxxx/mone   00        ddxxx024de4f   13 hours ago   772MB
python               latest    254d4xxx8f31   7 days ago     885MB
ubuntu               16.04     818xxx1cd5ad   5 weeks ago    132MB
django               latest    eb40dcf6xx78   4 years ago    436MB

<span class="o">&gt;&gt;</span> docker create <span class="nt">-it</span> <span class="o">{</span>이미지명<span class="o">}</span>:<span class="o">{</span>태그<span class="o">}</span> <span class="c"># 2. 도커이미지를 컨테이너로 생성한다.</span>

<span class="o">&gt;&gt;</span> docker start <span class="o">{</span>컨테이너 <span class="nb">id </span>또는 이름<span class="o">}</span> <span class="c"># 3. 컨테이너를 시작한다.</span>

<span class="o">&gt;&gt;</span> docker attach <span class="o">{</span>컨테이너 <span class="nb">id </span>또는 이름<span class="o">}</span> <span class="c"># 4. 컨테이너로 들어가기!</span>

<span class="o">&gt;&gt;</span> docker run <span class="nt">-it</span> <span class="o">{</span>이미지명<span class="o">}</span>:<span class="o">{</span>태그<span class="o">}</span> <span class="c"># 위 1, 2, 3, 4 를 한번에 진행하는 커맨드</span>

<span class="o">&gt;&gt;</span> docker ps <span class="c"># 동작 중인 컨테이너 확인하기</span>
</code></pre></div></div>
<blockquote>
  <p>참고로 -it 옵션은 컨테이너로 들어갔을 때, bash로 CLI 입출력을 사용할 수 있도록 해주는 것이라고 함.</p>
</blockquote>

<p>위 과정을 통해 우리는 가상의 환경을 하나 실행할 수 있게 되었고, 이제 이 위에서 파일을 수정해보자.</p>

<h2 id="3-고래-등-위에서">3. 고래 등 위에서…</h2>
<hr />
<p>일단 테스트를 하기 위해 서버를 하나 돌려서 앞으로 남은 Task 들을 처리할 수 있도록 준비해보자.</p>
<ul>
  <li>아래의 순서에 따라 진행해보자.</li>
</ul>

<ol>
  <li>docker image pull 받기
    <ul>
      <li>사용할 이미지를 내 docker로 가져온다.</li>
    </ul>
    <p align="center"><img src="https://user-images.githubusercontent.com/26760693/109688354-8715e700-7bc7-11eb-9f24-39b181ae68bf.png" width="700" height="300" /></p>
  </li>
  <li>docker에 접속하기
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> docker run <span class="nt">-it</span> <span class="o">[</span>이미지 아이디] <span class="c"># 이미지를 불러오고 싶다면,</span>
<span class="c">## 혹은</span>
<span class="o">&gt;&gt;</span> docker start <span class="o">[</span>컨테이너 아이디] <span class="c"># 컨테이너가 꺼져 있다면,</span>
<span class="o">&gt;&gt;</span> docker attach <span class="nt">-it</span> <span class="o">[</span>컨테이너 아이디] <span class="c"># 켜져 있는 컨테이너에 접속한다면,</span>
</code></pre></div>    </div>
    <p align="center"><img src="https://user-images.githubusercontent.com/26760693/109688423-97c65d00-7bc7-11eb-8def-ab0c323b78a1.png" width="700" height="400" /></p>
    <blockquote>
      <p>이 때, run을 하면 같은 이미지의 다른 컨테이너를 생성하므로 주의해야한다.(좌측 상단 2개의 ‘dd3’)</p>
    </blockquote>
  </li>
  <li>github에 repo 하나를 만들어서 clone, 만약 docker 환경에 깃이 없으면 설치를 해야한다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">&gt;&gt;</span> root@620a89368594:/<span class="se">\#</span> <span class="nb">cd </span>home
 <span class="o">&gt;&gt;</span> root@620a89368594:/<span class="se">\#</span> git clone https://github.com/sunio00000/DockerNamu <span class="c"># clone</span>
</code></pre></div>    </div>
  </li>
  <li>파일 수정하기 위한 작업
    <ul>
      <li>vsc의 extension을 사진의 두가지 깔아야함</li>
      <li>다운 과정에서 필요하다면, docker desktop을 설치하고 windows는 추가로 wsl2를 다운받게됨</li>
    </ul>
    <p align="center"><img src="https://user-images.githubusercontent.com/26760693/109688413-95640300-7bc7-11eb-8efc-4ea7b5ed9807.png" width="700" height="500" /></p>
  </li>
  <li>수정하기
    <ul>
      <li>아래처럼 vim을 통해 수정해도 된다.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">&gt;&gt;</span> root@620a89368594:/<span class="se">\#</span> vim new.py <span class="c"># 이렇게 할 수도 있지만...</span>
</code></pre></div>        </div>
      </li>
      <li>아래 사진과 같이 바로 적용되는 것을 확인할 수 있다.</li>
    </ul>
    <p align="center"><img src="https://user-images.githubusercontent.com/26760693/109688432-98f78a00-7bc7-11eb-988c-6a9a88b0209b.png" width="700" height="500" /></p>
  </li>
  <li>깃허브 푸쉬해보기, 이 때 아마 config 설정을 요구할 거에요 충족시켜 주세요.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">&gt;&gt;</span> root@7df4751c1e80:/<span class="se">\#</span> git push <span class="c"># add, commit 다하구 푸쉬푸   쉬</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="4-마치며">4. 마치며…</h2>
<hr />
<p>이렇게 vsc 를 통해 docker의 파일을 수정하는 방법에 대해서 배울 수 있었다. 너무나 간단한 내용이지만 포스팅을 하다보니 docker는 이런 개발환경 구축의 목적 뿐 아니라 배포환경을 만드는데 너무나 적합하다는 것 같다는 생각이 들었다.</p>

<p>💡 포스팅 과정에서 몇 가지 이슈가 있는데 다음과 같다.</p>

<ul>
  <li>wsl 탓인지 docker 탓인지 환경이 매우,매우,매우 느리게 느껴진다.</li>
  <li>원하는 폴더를 explorer로 바로바로 열어 수정하고 싶은데 아직 못찾았다.</li>
  <li>배포 환경을 구축하는데 dockerfile의 활용과 docker compose에 대해 이해할 필요가 있을 것 같다.</li>
</ul>

<h2 id="5-reference">5. Reference</h2>
<hr />
<p><a href="!https://www.yalco.kr/36_docker/">얄팍한 코딩사전 docker 명령어</a></p>

<p><a href="!http://labs.brandi.co.kr/2021/01/20/hwangsg.html">로컬 개발환경 도커 사용하기</a></p>

<p><a href="!https://changhoi.github.io/posts/docker/docker-development-env-(1)/">도커로 개발환경 구축하기</a></p>

<p><a href="!https://www.manualfactory.net/10964">Visual Studio Code / FTP(SFTP)로 원격 서버 접속하여 파일 수정하는 방법</a></p>

<p><a href="!https://89douner.tistory.com/123">vscode 와 docker 연동하기</a></p>
:ET